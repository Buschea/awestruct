#!/usr/bin/env jruby

$: << File.dirname(__FILE__) + '/../lib'

require 'rubygems'
require 'optparse'
require 'awestruct/commands/generate'
require 'awestruct/commands/server'

def parse(args)
  options = OpenStruct.new( {
              :generate=>true,
              :server=>false,
              :port=>4242,
              :bind_addr=>'0.0.0.0',
              :auto=>false,
              :force=>false,
            } )

  opts = OptionParser.new do |opts|
    opts.on( '--force', 'Force a regeneration' ) do |force|
      options.force = force
    end
    opts.on( '-s', '--server', 'Serve generated site' ) do |s|
      options.server = s
    end
    opts.on( '-a', '--auto', 'Auto-generate when changes are noticed' ) do |a|
      options.auto = a
    end
    opts.on( '-p', '--port PORT', Integer, 'Server port' ) do |port|
      options.port = port
    end
    opts.on( '-b', '--bind ADDR', 'Server port' ) do |bind_addr|
      options.bind_addr = bind_addr
    end
    opts.on( '-g', '--[no-]generate', 'Generated site' ) do |g|
      options.generate = g
    end

    opts.separator ''
    opts.separator "Common options:"

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

  end
  
  opts.parse!(args)
  options
end

options = parse(ARGV)

threads = []

if ( options.generate )
  cmd = Awestruct::Commands::Generate.new( Dir.pwd, options.force )
  cmd.run
end

if ( options.auto )
  threads << Thread.new {
    generate_cmd = Awestruct::Commands::Generate.new( Dir.pwd, options.force )
    while ( true )
      generate_cmd.run
      sleep(1)
    end
  }
end

if ( options.server )
  threads << Thread.new {
    server_cmd = Awestruct::Commands::Server.new( File.join( Dir.pwd, '_site' ), options.bind_addr, options.port )
    server_cmd.run
  }
end

threads.each do |thr|
  thr.join
end



